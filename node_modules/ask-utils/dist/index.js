'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var errorHandlers = require('@ask-utils/error-handlers');
var core = require('@ask-utils/core');
var handlers = require('@ask-utils/handlers');
var proactiveEvent = require('@ask-utils/proactive-event');
var isp = require('@ask-utils/isp');
var serviceClient = require('@ask-utils/service-client');
var askSdk = require('ask-sdk');
var askSdkS3PersistenceAdapter = require('ask-sdk-s3-persistence-adapter');
var askSdkDynamodbPersistenceAdapter = require('ask-sdk-dynamodb-persistence-adapter');

const isS3Skill = (config) => {
    return config.persistanceType === 'S3';
};
const isDynamoDBSkill = (config) => {
    return config.persistanceType === 'DynamoDB';
};
const createSkill = (config, handlers$1) => {
    const skill = askSdk.SkillBuilders.custom().withApiClient(new askSdk.DefaultApiClient());
    if (isS3Skill(config)) {
        skill.withPersistenceAdapter(new askSdkS3PersistenceAdapter.S3PersistenceAdapter({
            bucketName: config.bucketName,
            pathPrefix: config.bucketPathPrefix
        }));
    }
    else if (isDynamoDBSkill(config)) {
        skill.withPersistenceAdapter(new askSdkDynamodbPersistenceAdapter.DynamoDbPersistenceAdapter({
            tableName: config.tableName
        }));
    }
    const { requestHandlers, errorHandlers, requestInterceptors, responseInterceptors } = handlers$1;
    skill.addRequestHandlers(...requestHandlers).addRequestInterceptors(core.RequestLogger, handlers.SetLaunchCountInterceptor).addResponseInterceptors(handlers.RecordTheResponseInterceptor, core.ResponseLogger);
    if (config.constants) {
        const ConstantsInterceptor = handlers.ConstantsInterceptorFactory.init(config.constants);
        skill.addRequestInterceptors(ConstantsInterceptor);
    }
    if (config.isISP) {
        skill.addRequestHandlers(...isp.ISPHandlers)
            .addRequestInterceptors(isp.altLoadISPDataInterceptor);
    }
    skill.addRequestHandlers(handlers.RepeatIntent, handlers.DeleteDisabledUserHandler, handlers.SessionEndedRequestHandler);
    if (requestInterceptors)
        skill.addRequestInterceptors(...requestInterceptors);
    if (responseInterceptors)
        skill.addResponseInterceptors(...responseInterceptors);
    if (errorHandlers)
        skill.addErrorHandlers(...errorHandlers);
    return skill;
};

class SkillHandlersFactory {
    static create() {
        const handlers = {
            requestHandlers: [],
            requestInterceptors: [],
            responseInterceptors: [],
            errorHandlers: []
        };
        return {
            addRequestHandlers(...requestHandlers) {
                requestHandlers.forEach(handler => handlers.requestHandlers.push(handler));
                return this;
            },
            addRequestInterceptors(...requestInterceptors) {
                if (!handlers.requestInterceptors)
                    handlers.requestInterceptors = [];
                requestInterceptors.forEach(interceptor => handlers.requestInterceptors.push(interceptor));
                return this;
            },
            addResponseInterceptors(...responseInterceptors) {
                if (!handlers.responseInterceptors)
                    handlers.responseInterceptors = [];
                responseInterceptors.forEach(interceptor => handlers.responseInterceptors.push(interceptor));
                return this;
            },
            addErrorHandlers(...errorHandlers) {
                if (!handlers.errorHandlers)
                    handlers.errorHandlers = [];
                handlers.errorHandlers.concat(errorHandlers);
                return this;
            },
            getHandlers() {
                return handlers;
            }
        };
    }
}

Object.keys(errorHandlers).forEach(function (k) {
    if (k !== 'default') Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () {
            return errorHandlers[k];
        }
    });
});
Object.keys(core).forEach(function (k) {
    if (k !== 'default') Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () {
            return core[k];
        }
    });
});
Object.keys(handlers).forEach(function (k) {
    if (k !== 'default') Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () {
            return handlers[k];
        }
    });
});
Object.keys(proactiveEvent).forEach(function (k) {
    if (k !== 'default') Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () {
            return proactiveEvent[k];
        }
    });
});
Object.keys(isp).forEach(function (k) {
    if (k !== 'default') Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () {
            return isp[k];
        }
    });
});
Object.keys(serviceClient).forEach(function (k) {
    if (k !== 'default') Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () {
            return serviceClient[k];
        }
    });
});
exports.SkillHandlersFactory = SkillHandlersFactory;
exports.createSkill = createSkill;
