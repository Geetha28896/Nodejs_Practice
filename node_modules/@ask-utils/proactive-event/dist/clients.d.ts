import { AxiosRequestConfig } from 'axios';
import { event, client } from './model';
export declare const getApiURL: (config: client.ClientConfig) => client.APIEndpoint;
export declare const getApiEndpoint: (config: client.ClientConfig) => client.APIEndpoint;
export declare const isAuthResponse: (res: any) => res is client.AuthResponse;
export default class ProactiveClient {
    protected clientId: client.ClientId;
    protected clientSecret: client.ClientSecret;
    protected apiEndpoint: client.APIEndpoint;
    private body;
    constructor(config: client.ClientConfig);
    getReferenceId(): string;
    updateReferenceId(id: string): this;
    getAccessToken(): Promise<client.AuthResponse>;
    setReferenceId(id: string): this;
    setTimestamp(date: Date): this;
    setExpiryTime(date: Date): this;
    setEvent(event: event.Props): this;
    setPayload(payload: event.Payload): this;
    setEventName(name: event.EventName): this;
    setLocalizedAttributes(localizedAttributes: {}[]): this;
    setRelevantAudience(type: client.AudienceType, payload?: client.AudiencePayload): this;
    getBody(): client.RequstBody;
    getRequestParams(accessToken: string): AxiosRequestConfig;
    requestEvent(): Promise<client.Response>;
}
