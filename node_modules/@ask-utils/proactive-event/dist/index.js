'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var moment = _interopDefault(require('moment'));
var axios = _interopDefault(require('axios'));
var uuid = _interopDefault(require('uuid'));

class ParameterFactory {
    static init() {
        const eventName = 'AMAZON.TrashCollectionAlert.Activated';
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let alert = {};
        return {
            putAlert(alertItem) {
                alert = alertItem;
                return this;
            },
            putGarbageTypes(garbageTypes) {
                alert.garbageTypes = garbageTypes;
                return this;
            },
            addGarbageType(garbageType) {
                if (alert.garbageTypes && alert.garbageTypes.length > 0) {
                    alert.garbageTypes.push(garbageType);
                }
                else {
                    alert.garbageTypes = [garbageType];
                }
                return this;
            },
            setCollectionDayOfWeek(collectionDayOfWeek) {
                alert.collectionDayOfWeek = collectionDayOfWeek;
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                return {
                    alert
                };
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const TrashCollectionAlert = {
    Activated: {
        PayloadFactory: ParameterFactory,
        PayloadBuilder: ParameterFactory.init()
    }
};

// general
const isObject = (obj) => {
    if (!obj)
        return false;
    return typeof obj === 'object';
};
const isEmpty = (obj) => {
    if (!isObject(obj))
        return true;
    return Object.keys(obj).length < 1;
};
// specific
const isCreativeWork = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.name || !obj.contentType)
        return false;
    return true;
};
const isAvailability = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.startTime || !obj.method)
        return false;
    return true;
};
const isWeatherAlert = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.alertType)
        return false;
    return true;
};
const isMessageState = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.status)
        return false;
    return true;
};
const isMessageGroup = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.creator || !obj.count)
        return false;
    return true;
};
const isOccasion = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.occasionType || !obj.subject || !obj.provider || !obj.bookingTime)
        return false;
    return true;
};
const isOrderState = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.status)
        return false;
    return true;
};
const isGame = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.name || !obj.offer)
        return false;
    return true;
};
const isGameInvite = (obj) => {
    if (isEmpty(obj))
        return false;
    if (!obj.relationshipToInvitee || !obj.inviter || !obj.inviteType)
        return false;
    return true;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getCreativeWork = (obj) => {
    if (isCreativeWork(obj)) {
        const { name, contentType } = obj;
        const newProps = { name, contentType };
        return newProps;
    }
    throw new Error('Invalid creative work object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getAvailability = (obj) => {
    if (isAvailability(obj)) {
        const { method, startTime, provider } = obj;
        const newProps = { method, startTime };
        if (provider)
            newProps.provider = provider;
        return newProps;
    }
    throw new Error('Invalid Availability object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getWeatherAlert = (obj) => {
    if (isWeatherAlert(obj)) {
        const { alertType, source } = obj;
        const newProps = { alertType };
        if (source)
            newProps.source = source;
        return newProps;
    }
    throw new Error('Invalid WeatherAlert object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getMessageState = (obj) => {
    if (isMessageState(obj)) {
        const { status, freshness } = obj;
        const newProps = { status };
        if (freshness)
            newProps.freshness = freshness;
        return newProps;
    }
    throw new Error('Invalid MessageState object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getMessageGroup = (obj) => {
    if (isMessageGroup(obj)) {
        const { creator, count, urgency } = obj;
        const newProps = { creator, count };
        if (urgency)
            newProps.urgency = urgency;
        return newProps;
    }
    throw new Error('Invalid MessageGroup object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getOccasion = (obj) => {
    if (isOccasion(obj)) {
        const { occasionType, subject, provider, bookingTime, broker } = obj;
        const newProps = { occasionType, subject, provider, bookingTime };
        if (broker)
            newProps.broker = broker;
        return newProps;
    }
    throw new Error('Invalid Occasion object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getOrderState = (obj) => {
    if (isOrderState(obj)) {
        const { status, enterTimestamp, deliveryDetails } = obj;
        const newProps = { status };
        if (enterTimestamp)
            newProps.enterTimestamp = enterTimestamp;
        if (deliveryDetails)
            newProps.deliveryDetails = deliveryDetails;
        return newProps;
    }
    throw new Error('Invalid OrderState object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getGame = (obj) => {
    if (isGame(obj)) {
        const { offer, name } = obj;
        return { offer, name };
    }
    throw new Error('Invalid Game object');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getGameInvite = (obj) => {
    if (isGameInvite(obj)) {
        const { inviteType, inviter, relationshipToInvitee } = obj;
        return { inviteType, inviter, relationshipToInvitee };
    }
    throw new Error('Invalid GameInvite object');
};

class ParameterFactory$1 {
    static init() {
        const eventName = 'AMAZON.MediaContent.Available';
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const availability = {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const content = {
            name: 'localizedattribute:contentName'
        };
        return {
            setContentName(name) {
                content.name = name;
                return this;
            },
            setMediaType(type) {
                content.contentType = type;
                return this;
            },
            setStartTime(date) {
                availability.startTime = moment(date).toISOString();
                return this;
            },
            setDistributionMethod(method) {
                availability.method = method;
                return this;
            },
            setProvider(providerName = 'localizedattribute:providerName') {
                availability.provider = {
                    name: providerName
                };
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                return {
                    availability: getAvailability(availability),
                    content: getCreativeWork(content)
                };
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const MediaContent = {
    Available: {
        PayloadFactory: ParameterFactory$1,
        PayloadBuilder: ParameterFactory$1.init()
    }
};

// helper
class ParameterFactory$2 {
    static init() {
        const eventName = 'AMAZON.WeatherAlert.Activated';
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const weatherAlert = {};
        return {
            setAlertSource(source = 'localizedattribute:source') {
                weatherAlert.source = source;
                return this;
            },
            setAlertType(type) {
                weatherAlert.alertType = type;
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                return {
                    weatherAlert: getWeatherAlert(weatherAlert)
                };
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const WeatherAlert = {
    Activated: {
        PayloadFactory: ParameterFactory$2,
        PayloadBuilder: ParameterFactory$2.init()
    }
};

// helper
class ParameterFactory$3 {
    static init() {
        const eventName = 'AMAZON.MessageAlert.Activated';
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const state = {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const group = {};
        return {
            setMessageCreator(name) {
                const person = {
                    name
                };
                group.creator = person;
                return this;
            },
            setMessageCount(count) {
                group.count = count;
                return this;
            },
            setMessageUrgency(urgency = 'URGENT') {
                group.urgency = urgency;
                return this;
            },
            setMessageFreshness(freshness) {
                state.freshness = freshness;
                return this;
            },
            setMessageStatus(messageStatus) {
                state.status = messageStatus;
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                return {
                    state: getMessageState(state),
                    messageGroup: getMessageGroup(group)
                };
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const MessageAlert = {
    Activated: {
        PayloadFactory: ParameterFactory$3,
        PayloadBuilder: ParameterFactory$3.init()
    }
};

class ParameterFactory$4 {
    static init() {
        const eventName = 'AMAZON.Occasion.Updated';
        const confirmationState = {
            confirmationStatus: 'CONFIRMED'
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const occasion = {
            broker: {
                name: 'localizedattribute:brokerName'
            },
            provider: {
                name: 'localizedattribute:providerName'
            }
        };
        return {
            updateConfirmationStatus(status) {
                confirmationState.confirmationStatus = status;
                return this;
            },
            getConfirmationState() {
                return confirmationState;
            },
            getConfirmationStatus() {
                return confirmationState.confirmationStatus;
            },
            setOccasionType(type) {
                occasion.occasionType = type;
                return this;
            },
            setSubject(subject) {
                occasion.subject = subject;
                return this;
            },
            setProviderName(name) {
                occasion.provider.name = name;
                return this;
            },
            setBookingTime(date) {
                occasion.bookingTime = moment(date).toISOString();
                return this;
            },
            setBrokerName(name) {
                occasion.broker.name = name;
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                return {
                    state: confirmationState,
                    occasion: getOccasion(occasion)
                };
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const Occasion = {
    Updated: {
        PayloadFactory: ParameterFactory$4,
        PayloadBuilder: ParameterFactory$4.init()
    }
};

class ParameterFactory$5 {
    static init() {
        const eventName = 'AMAZON.OrderStatus.Updated';
        const order = {
            seller: {
                name: 'localizedattribute:sellerName'
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const orderState = {};
        return {
            setOrderStatus(status) {
                orderState.status = status;
                return this;
            },
            setEnterTimestamp(date) {
                orderState.enterTimestamp = moment(date).toISOString();
                return this;
            },
            setExpectedArrival(date) {
                orderState.deliveryDetails = {
                    expectedArrival: moment(date).toISOString()
                };
                return this;
            },
            updateSellerName(name) {
                order.seller.name = name;
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                return {
                    state: getOrderState(orderState),
                    order
                };
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const OrderStatus = {
    Updated: {
        PayloadFactory: ParameterFactory$5,
        PayloadBuilder: ParameterFactory$5.init()
    }
};

// helper
class ParameterFactory$6 {
    static init() {
        const eventName = 'AMAZON.SocialGameInvite.Available';
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const invite = {
            inviter: {
                name: ''
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const game = {
            name: 'localizedattribute:gameName'
        };
        return {
            setInviterName(name) {
                invite.inviter.name = name;
                return this;
            },
            setRelationshipToInvitee(relation) {
                invite.relationshipToInvitee = relation;
                return this;
            },
            setInviteType(type) {
                invite.inviteType = type;
                return this;
            },
            setGameOfferName(name) {
                game.offer = name;
                return this;
            },
            setGameName(name) {
                game.name = name;
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                return {
                    invite: getGameInvite(invite),
                    game: getGame(game)
                };
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const SocialGameInvite = {
    Available: {
        PayloadFactory: ParameterFactory$6,
        PayloadBuilder: ParameterFactory$6.init()
    }
};

class ParameterFactory$7 {
    static init() {
        const eventName = 'AMAZON.SportsEvent.Updated';
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const eventLeague = {
            name: 'localizedattribute:eventLeagueName'
        };
        const homeTeamStatistic = {
            team: {
                name: ''
            },
            score: 0
        };
        const awayTeamStatistic = {
            team: {
                name: ''
            },
            score: 0
        };
        let updated = null;
        return {
            updateGoalData(teamName, score) {
                if (updated === null) {
                    updated = {
                        scoreEarned: score,
                        teamName
                    };
                }
                updated.scoreEarned = score;
                updated.teamName = teamName;
                return this;
            },
            setEventLeagueName(name) {
                eventLeague.name = name;
                return this;
            },
            setHomeTeamStatistic(teamName, score) {
                homeTeamStatistic.team.name = teamName;
                homeTeamStatistic.score = score;
                return this;
            },
            setAwayTeamStatistic(teamName, score) {
                awayTeamStatistic.score = score;
                awayTeamStatistic.team.name = teamName;
                return this;
            },
            getEventName() {
                return eventName;
            },
            getPayload() {
                const payload = {
                    sportsEvent: {
                        eventLeague,
                        homeTeamStatistic,
                        awayTeamStatistic
                    }
                };
                if (updated !== null && Object.prototype.hasOwnProperty.call(updated, 'scoreEarned') && Object.prototype.hasOwnProperty.call(updated, 'teamName'))
                    payload.update = updated;
                return payload;
            },
            getParameter() {
                return {
                    name: eventName,
                    payload: this.getPayload()
                };
            }
        };
    }
}

const SportsEvent = {
    Updated: {
        PayloadFactory: ParameterFactory$7,
        PayloadBuilder: ParameterFactory$7.init()
    }
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const getApiURL = (config) => {
    if (config.apiEndpont)
        return config.apiEndpont;
    switch (config.apiRegion) {
        case 'FE':
            return 'https://api.fe.amazonalexa.com/v1/proactiveEvents/';
        case 'EU':
            return 'https://api.eu.amazonalexa.com/v1/proactiveEvents/';
        case 'US':
        default:
            return 'https://api.amazonalexa.com/v1/proactiveEvents/';
    }
};
const getApiEndpoint = (config) => {
    const url = getApiURL(config);
    if (!config.isProduction)
        return `${url}stages/development`;
    return url;
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isAuthResponse = (res) => {
    if (!res)
        return false;
    if (!res.access_token || !res.expires_in || !res.scope || !res.token_type)
        return false;
    return true;
};
class ProactiveClient {
    constructor(config) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.body = {};
        this.clientId = config.clientId;
        this.clientSecret = config.clientSecret;
        this.apiEndpoint = getApiEndpoint(config);
        this.body = {
            timestamp: moment().toISOString(),
            expiryTime: moment().add(1, 'days').toISOString(),
            event: {},
            relevantAudience: 'Multicast',
            referenceId: uuid.v4()
        };
        return this;
    }
    getReferenceId() {
        return this.body.referenceId;
    }
    updateReferenceId(id) {
        this.body.referenceId = id;
        return this;
    }
    getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield axios({
                method: 'POST',
                url: 'https://api.amazon.com/auth/O2/token',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                data: [
                    'scope=alexa::proactive_events',
                    'grant_type=client_credentials',
                    `client_id=${this.clientId}`,
                    `client_secret=${this.clientSecret}`
                ].join('&')
            });
            if (!isAuthResponse(response.data))
                throw new Error('failed to get access token');
            return response.data;
        });
    }
    setReferenceId(id) {
        this.body.referenceId = id;
        return this;
    }
    setTimestamp(date) {
        this.body.timestamp = moment(date).toISOString();
        return this;
    }
    setExpiryTime(date) {
        this.body.expiryTime = moment(date).toISOString();
        return this;
    }
    setEvent(event) {
        this.body.event = event;
        return this;
    }
    setPayload(payload) {
        this.body.event.payload = payload;
        return this;
    }
    setEventName(name) {
        this.body.event.name = name;
        return this;
    }
    setLocalizedAttributes(localizedAttributes) {
        this.body.localizedAttributes = localizedAttributes;
        return this;
    }
    setRelevantAudience(type, payload) {
        const relevantAudience = {
            type
        };
        if (type === 'Unicast')
            relevantAudience.payload = payload;
        this.body.relevantAudience = relevantAudience;
        return this;
    }
    getBody() {
        return this.body;
    }
    getRequestParams(accessToken) {
        return {
            method: 'POST',
            url: this.apiEndpoint,
            headers: {
                'Content-type': 'application/json',
                Authorization: `Bearer ${accessToken}`
            },
            data: this.getBody()
        };
    }
    requestEvent() {
        return __awaiter(this, void 0, void 0, function* () {
            const authResult = yield this.getAccessToken();
            if (!authResult.access_token)
                throw new Error('missing access_token');
            const param = this.getRequestParams(authResult.access_token);
            try {
                const response = yield axios(param);
                return {
                    statusCode: response.status,
                    message: response.statusText,
                    request: this.getBody()
                };
            }
            catch (e) {
                if (!e.response)
                    throw e;
                const err = {
                    statusCode: 500,
                    errorCode: 'Error',
                    message: 'Internal Error'
                };
                if (e.response.data && e.response.data.message)
                    err.message = e.response.data.message;
                if (e.response.status)
                    err.statusCode = e.response.status;
                if (e.response.statusText)
                    err.errorCode = e.response.statusText;
                throw err;
            }
        });
    }
}

class LocalizedAttributesFactory {
    static init() {
        const localizedAttributes = [];
        return {
            putLocalizedAttribute(locale, key, text) {
                localizedAttributes.push({
                    locale,
                    [key]: text
                });
                return this;
            },
            getLocalizedAttributes() {
                return localizedAttributes;
            }
        };
    }
}

const LocalizedAttributes = {
    Factory: LocalizedAttributesFactory,
    Builder: LocalizedAttributesFactory.init()
};

const TrashCollectionAlert$1 = TrashCollectionAlert;
const MediaContent$1 = MediaContent;
const WeatherAlert$1 = WeatherAlert;
const MessageAlert$1 = MessageAlert;
const Occasion$1 = Occasion;
const Client = ProactiveClient;
const OrderStatus$1 = OrderStatus;
const SocialGameInvite$1 = SocialGameInvite;
const SportsEvent$1 = SportsEvent;
const LocalizedAttributes$1 = LocalizedAttributes;
var index = {
    TrashCollectionAlert: TrashCollectionAlert$1,
    MediaContent: MediaContent$1,
    WeatherAlert: WeatherAlert$1,
    MessageAlert: MessageAlert$1,
    Occasion: Occasion$1,
    OrderStatus: OrderStatus$1,
    SocialGameInvite: SocialGameInvite$1,
    SportsEvent: SportsEvent$1,
    LocalizedAttributes: LocalizedAttributes$1,
    Client
};

exports.Client = Client;
exports.LocalizedAttributes = LocalizedAttributes$1;
exports.MediaContent = MediaContent$1;
exports.MessageAlert = MessageAlert$1;
exports.Occasion = Occasion$1;
exports.OrderStatus = OrderStatus$1;
exports.SocialGameInvite = SocialGameInvite$1;
exports.SportsEvent = SportsEvent$1;
exports.TrashCollectionAlert = TrashCollectionAlert$1;
exports.WeatherAlert = WeatherAlert$1;
exports.default = index;
