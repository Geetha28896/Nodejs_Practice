/**
 * Deprecated
 */
import { HandlerInput } from 'ask-sdk-core';
import { Response, Request, RequestEnvelope } from 'ask-sdk-model';
import { interfaces } from 'class-resolver';
export interface TMergeTargetHandler<Input = HandlerInput, Output = Response> {
    canHandle?: (input: Input) => Promise<boolean> | boolean;
    handle?: (input: Input) => Promise<Output> | Output;
}
export interface TRequestHandler<Input = HandlerInput, Output = Response> {
    canHandle: (input: Input) => Promise<boolean> | boolean;
    handle: (input: Input) => Promise<Output> | Output;
}
export interface CustomeRequestEnvelope<CustomRequest extends Request> extends RequestEnvelope {
    request: CustomRequest;
}
export interface CustomHandlerInput<CustomRequest extends Request = Request> extends HandlerInput {
    requestEnvelope: CustomeRequestEnvelope<CustomRequest>;
}
export interface RequestHandlerBuilder<Input = CustomHandlerInput> extends interfaces.ResolveTarget {
    handle(handler: TMergeTargetHandler): TRequestHandler<Input>;
}
export declare type SupportedHandlerType = 'LaunchRequest';
export declare class RequestHandlerFactory {
    static create(type: SupportedHandlerType, handler: TMergeTargetHandler): TRequestHandler;
}
export default RequestHandlerFactory;
export declare class LaunchRequestHandlerFactory implements RequestHandlerBuilder {
    supports(type: string): boolean;
    handle(handler: TMergeTargetHandler): TRequestHandler<HandlerInput, Response>;
}
export declare class FallbackIntentFactory implements RequestHandlerBuilder {
    supports(): boolean;
    handle(handler: TMergeTargetHandler): TRequestHandler<HandlerInput, Response>;
}
