import { HandlerInput } from 'ask-sdk-core';
import { RequestEnvelope, services } from 'ask-sdk-model';
import InSkillProductsResponse = services.monetization.InSkillProductsResponse;
import InSkillProduct = services.monetization.InSkillProduct;
declare type InskillProducts = InSkillProduct[];
export declare class APIClient {
    private token;
    private locale;
    private endpoint;
    private isDebug;
    constructor(requestEnvelope: RequestEnvelope, isDebug?: boolean);
    private getURL;
    private createAxiosRequestObject;
    protected get(productId?: string): Promise<any>;
    listProducts(): Promise<InSkillProductsResponse>;
    getProduct(productId: string): Promise<InSkillProduct>;
}
export declare class ISPProductClient extends APIClient {
    private attributeManager;
    private cacheUsage;
    private products;
    constructor(handlerInput: HandlerInput, isDebug?: boolean);
    getCacheStatus(): 'enable' | 'disable';
    /**
   * Disallow to use the session attributes item at first
   **/
    disabledCache(): this;
    /**
   * Allow to use the session attributes item at first
   **/
    enableCache(): this;
    /**
   * Check product avaliable status
   * If products is empty, try to fetch at once
   */
    private hasProducts;
    /**
   * get product from session attributes
   */
    private getCachedProducts;
    /**
   * Fetch the ISP API.
   * If cacheUsage is enabled, it will return from session attributes at first
   */
    fetchLists(): Promise<void>;
    /**
   * get product by product id
   * @param productId {string}
   */
    getProductById(productId: string): Promise<InSkillProduct>;
    /**
   * get products
   */
    getProducts(): Promise<InskillProducts>;
    /**
   * Find product by the list number
   * @param userInputNo {number} list number
   */
    findProductByNo(userInputNo: number): Promise<InSkillProduct | null>;
    /**
   * Find product by the specific id
   * @param productId {string} product id
   */
    findProductById(productId: string): Promise<InSkillProduct | null>;
    /**
   * Find product by the product name
   * @param productName {string} product name
   */
    findProductByName(productName: string): Promise<InSkillProduct | null>;
    /**
   * Find product by several condition
   * @param condition {productName?: string, userInputNo?: number, productId?: string} search conditions
   */
    searchProduct(condition: {
        productName?: string;
        userInputNo?: number;
        productId?: string;
    }): Promise<InSkillProduct | null>;
}
export default ISPProductClient;
