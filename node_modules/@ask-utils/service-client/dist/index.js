'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));
var askSdkCore = require('ask-sdk-core');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class APIClient {
    constructor(requestEnvelope, isDebug = true) {
        this.path = '';
        this.token = askSdkCore.getApiAccessToken(requestEnvelope);
        this.locale = askSdkCore.getLocale(requestEnvelope);
        this.endpoint = requestEnvelope.context.System.apiEndpoint;
        this.isDebug = isDebug;
    }
    getURL(path) {
        const p = `/${this.path}${path ? `/${path}` : ''}`;
        const url = `${this.endpoint}${p.replace(/\/\//g, '/')}`;
        return url;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    createAxiosRequestObject(method, path, data) {
        const conf = {
            method: method,
            url: this.getURL(path),
            headers: {
                'Content-type': 'application/json',
                'Accept-Language': this.locale,
                Authorization: `Bearer ${this.token}`
            }
        };
        if (data)
            conf.data = data;
        return conf;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    delete(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const param = this.createAxiosRequestObject('DELETE', path);
            if (this.isDebug)
                console.log('[Request] %j', param);
            const { data } = yield axios(param);
            if (this.isDebug)
                console.log('[Response] %j', data);
            return data;
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const param = this.createAxiosRequestObject('GET', path);
            if (this.isDebug)
                console.log('[Request] %j', param);
            const { data } = yield axios(param);
            if (this.isDebug)
                console.log('[Response] %j', data);
            return data;
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    post(body, path) {
        return __awaiter(this, void 0, void 0, function* () {
            const param = this.createAxiosRequestObject('POST', path, body);
            if (this.isDebug)
                console.log('[Request] %j', param);
            const { data } = yield axios(param);
            if (this.isDebug)
                console.log('[Response] %j', data);
            return data;
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    put(body, path) {
        return __awaiter(this, void 0, void 0, function* () {
            const param = this.createAxiosRequestObject('PUT', path, body);
            if (this.isDebug)
                console.log('[Request] %j', param);
            const { data } = yield axios(param);
            if (this.isDebug)
                console.log('[Response] %j', data);
            return data;
        });
    }
}

class UserProfileAPIClient extends APIClient {
    constructor() {
        super(...arguments);
        this.path = '/v2/accounts/~current/settings';
    }
    getProfileName() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get('Profile.name');
        });
    }
    getGivenName() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get('Profile.givenName');
        });
    }
    getEmail() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get('Profile.email');
        });
    }
    getMobileNumber() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get('Profile.mobileNumber');
        });
    }
}

class ListManagementAPIClient extends APIClient {
    constructor() {
        super(...arguments);
        this.path = 'v2/householdlists/';
    }
    getProfileName() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get('Profile.name');
        });
    }
    getListsMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get();
        });
    }
    getList(listId, status) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`${listId}/${status}`);
        });
    }
    createList(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.post(request);
        });
    }
    updateList(listId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.put(request, listId);
        });
    }
    deleteList(listId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.delete(listId);
        });
    }
    getListItem(listId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`${listId}/items/${itemId}`);
        });
    }
    createListItem(listId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.post(request, `${listId}/items/`);
        });
    }
    updateListItem(listId, itemId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.put(request, `${listId}/items/${itemId}`);
        });
    }
    deleteListItem(listId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.delete(`${listId}/items/${itemId}`);
        });
    }
}

class DeviceAPIClient extends APIClient {
    constructor() {
        super(...arguments);
        this.path = '/v1/devices/';
    }
    getCountryAndPostalCode(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`${deviceId}/settings/address/countryAndPostalCode`);
        });
    }
    getFullAddress(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`${deviceId}/settings/address`);
        });
    }
}

class SettingAPIClient extends APIClient {
    constructor() {
        super(...arguments);
        this.path = '/v2/devices/';
    }
    getTimezone(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`${deviceId}/settings/System.timeZone`);
        });
    }
    getTempratureUnit(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`${deviceId}/settings/System.temperatureUnit`);
        });
    }
    getDistanceUnits(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`${deviceId}/settings/System.distanceUnits`);
        });
    }
}

class ReminderAPIClient extends APIClient {
    constructor() {
        super(...arguments);
        this.path = '/v1/alerts/reminders';
    }
    deleteReminder(alertId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.delete(alertId);
        });
    }
    /**
     *
     * @param {string} alertId
     */
    getReminder(alertId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(alertId);
        });
    }
    /**
     *
     * @param {string} alertId
     * @param {reminderManagement.ReminderRequest} reminderRequest
     */
    updateReminder(alertId, reminderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.put(reminderRequest, alertId);
        });
    }
    /**
     *
     */
    getReminders() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get();
        });
    }
    /**
     *
     * @param {reminderManagement.ReminderRequest} reminderRequest
     */
    createReminder(reminderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.post(reminderRequest);
        });
    }
}

exports.DeviceAPIClient = DeviceAPIClient;
exports.ListManagementAPIClient = ListManagementAPIClient;
exports.ReminderAPIClient = ReminderAPIClient;
exports.SettingAPIClient = SettingAPIClient;
exports.UserProfileAPIClient = UserProfileAPIClient;
