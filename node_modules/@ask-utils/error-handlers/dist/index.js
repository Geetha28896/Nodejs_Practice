'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Sentry = require('@sentry/node');

Sentry.init({ dsn: process.env.SENTRY_DNS });
/**
 * ErrorHandler Factory for Sentry
 *
 * @example Basic
 * ```typescript
 * const ErrorHandler = SentryErrorHandlerFactory.init().getHandler()
 * ```
 * @example Custom speech and reprompt
 * ```typescript
 * const ErrorHandler = SentryErrorHandlerFactory.init()
 *                          .setErrorResponse('Speech something', 'reprompt something')
 *                          .getHandler()
 * ```
 * @example Custom handler
 * ```typescript
 * const ErrorHandler = SentryErrorHandlerFactory.init()
 *                          .setHandle((handlerInput) => {
 *                            return handlerInput.responseBuilder
 *                              .speak('Sorry I could not understand the meaning. Please tell me again')
 *                              .reprompt('Could you tell me onece more?')
 *                              .getResponse()
 *                          })
 *                          .getHandler()
 * ```
 */
class SentryErrorHandlerFactory {
    static init() {
        let handlerFilter = (handlerInput) => {
            return handlerInput.responseBuilder
                .speak('Sorry I could not understand the meaning. Please tell me again')
                .reprompt('Could you tell me onece more?')
                .getResponse();
        };
        const handler = {
            canHandle: () => true,
            handle: (handlerInput, error) => {
                Sentry.captureEvent({
                    message: error.message,
                    extra: {
                        request: handlerInput.requestEnvelope,
                        error,
                        stack: error.stack
                    }
                });
                return handlerFilter(handlerInput, error);
            }
        };
        return {
            getHandler() {
                return handler;
            },
            setHandle(handle) {
                handlerFilter = handle;
                return this;
            },
            setErrorResponse(speechText, repromptText) {
                handlerFilter = (handlerInput) => {
                    return handlerInput.responseBuilder
                        .speak(speechText)
                        .reprompt(repromptText)
                        .getResponse();
                };
                return this;
            }
        };
    }
}
const SentryDefaultErrorHandler = SentryErrorHandlerFactory.init().getHandler();
/**
 * Set additional track information
 *
 * @example
 * import Alexa from 'ask-sdk'
 * import { SetErrorTrackerInterceptor, SentryDefaultErrorHandler } from '@ask-utils/error-handlers'
 *
 * export const handler = Alexa.SkillBuilders.standard()
 *                            .addErrorHandlers(SentryDefaultErrorHandler)
 *                            .addRequestInterceptors(SetErrorTrackerInterceptor)
 *                            .lambda()
 */
const SetErrorTrackerInterceptor = {
    process({ requestEnvelope }) {
        const { System } = requestEnvelope.context;
        const userParams = {
            userId: System.user.userId
        };
        if (System.device)
            userParams.deviceId = System.device.deviceId;
        if (requestEnvelope.session)
            userParams.sessionId = requestEnvelope.session.sessionId;
        Sentry.configureScope(scope => {
            scope.setTag('request_id', requestEnvelope.request.requestId);
            scope.setUser(userParams);
        });
    }
};

exports.SentryDefaultErrorHandler = SentryDefaultErrorHandler;
exports.SentryErrorHandlerFactory = SentryErrorHandlerFactory;
exports.SetErrorTrackerInterceptor = SetErrorTrackerInterceptor;
