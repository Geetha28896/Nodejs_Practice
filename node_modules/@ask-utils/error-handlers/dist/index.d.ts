import { ErrorHandler, RequestInterceptor, HandlerInput } from 'ask-sdk-core';
import { Response } from 'ask-sdk-model';
export declare type ErrorHandle = (handlerInput: HandlerInput, error: Error) => Promise<Response> | Response;
export interface ErrorHandlerBuilder {
    getHandler(): ErrorHandler;
    setHandle(handle: ErrorHandle): ErrorHandlerBuilder;
    setErrorResponse(speechText: string, repromptText: string): ErrorHandlerBuilder;
}
/**
 * ErrorHandler Factory for Sentry
 *
 * @example Basic
 * ```typescript
 * const ErrorHandler = SentryErrorHandlerFactory.init().getHandler()
 * ```
 * @example Custom speech and reprompt
 * ```typescript
 * const ErrorHandler = SentryErrorHandlerFactory.init()
 *                          .setErrorResponse('Speech something', 'reprompt something')
 *                          .getHandler()
 * ```
 * @example Custom handler
 * ```typescript
 * const ErrorHandler = SentryErrorHandlerFactory.init()
 *                          .setHandle((handlerInput) => {
 *                            return handlerInput.responseBuilder
 *                              .speak('Sorry I could not understand the meaning. Please tell me again')
 *                              .reprompt('Could you tell me onece more?')
 *                              .getResponse()
 *                          })
 *                          .getHandler()
 * ```
 */
export declare class SentryErrorHandlerFactory {
    static init(): ErrorHandlerBuilder;
}
export declare const SentryDefaultErrorHandler: ErrorHandler;
/**
 * Set additional track information
 *
 * @example
 * import Alexa from 'ask-sdk'
 * import { SetErrorTrackerInterceptor, SentryDefaultErrorHandler } from '@ask-utils/error-handlers'
 *
 * export const handler = Alexa.SkillBuilders.standard()
 *                            .addErrorHandlers(SentryDefaultErrorHandler)
 *                            .addRequestInterceptors(SetErrorTrackerInterceptor)
 *                            .lambda()
 */
export declare const SetErrorTrackerInterceptor: RequestInterceptor;
